{"ast":null,"code":"// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\nexport const tuple = (...args) => args;\nexport const tupleNum = (...args) => args;\n/**\r\n * https://stackoverflow.com/a/59187769\r\n * Extract the type of an element of an array/tuple without performing indexing\r\n */","map":{"version":3,"sources":["D:/projects/my.projects/VUI/components/_util/type.ts"],"names":["tuple","args","tupleNum"],"mappings":"AACA;AACA,OAAO,MAAMA,KAAK,GAAG,CAAqB,GAAGC,IAAxB,KAAoCA,IAAlD;AAEP,OAAO,MAAMC,QAAQ,GAAG,CAAqB,GAAGD,IAAxB,KAAoCA,IAArD;AAEP","sourcesContent":["export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\r\n// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\r\nexport const tuple = <T extends string[]>(...args: T) => args;\r\n\r\nexport const tupleNum = <T extends number[]>(...args: T) => args;\r\n\r\n/**\r\n * https://stackoverflow.com/a/59187769\r\n * Extract the type of an element of an array/tuple without performing indexing\r\n */\r\nexport type ElementOf<T> = T extends (infer E)[] ? E : T extends readonly (infer E)[] ? E : never;\r\n\r\n/**\r\n * https://github.com/Microsoft/TypeScript/issues/29729\r\n */\r\nexport type LiteralUnion<T extends U, U> = T | (U & {});"]},"metadata":{},"sourceType":"module"}